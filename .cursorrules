# Cursor AI 프로젝트 규칙

## 🎯 프로젝트 구조 규칙

모든 프로젝트는 다음 필수 파일을 포함해야 합니다:

### 필수 파일
1. **run.bat** - AI가 실행하기 쉬운 초간단 스크립트
2. **AI_COMMANDS.md** - AI 실행 가이드 및 행동 규칙
3. **requirements.txt** - 패키지 의존성 (버전 범위 지정)
4. **README.md** - 프로젝트 설명 및 빠른 시작
5. **.gitignore** - Git 제외 파일

### 권장 파일
6. **start_app.bat/ps1** - 사용자용 상세 실행 스크립트
7. **SETUP.md** - 상세 설정 및 문제 해결 가이드
8. **.vscode/settings.json** - VSCode 워크스페이스 설정
9. **.vscode/tasks.json** - VSCode Task 설정

---

## 🤖 AI 실행 프로토콜

### 사용자가 "앱을 실행해 줘" 요청 시:

1. **현재 디렉토리 확인**
   ```bash
   pwd
   ```

2. **실행 우선순위**
   ```bash
   # 1순위
   .\run.bat
   
   # 2순위
   .\Scripts\[실행파일].exe [명령어]
   
   # 3순위
   python -m [모듈] [명령어]
   ```

3. **결과 확인 및 보고**
   - 실제 실행 여부 확인
   - URL/포트 안내
   - 오류 시 명확히 보고

---

## ⚠️ AI 필수 규칙

### ✅ DO (반드시 할 것)
- 명령 실행 후 **실제 결과 확인**
- 오류 발생 시 **명확히 보고**
- **run.bat 우선 실행**
- 실행 성공 시 **URL 안내**

### ❌ DON'T (절대 금지)
- **실행되지 않았는데 성공했다고 거짓 보고**
- **오류 무시**
- **백그라운드 실행 후 결과 미확인**
- **가상환경 활성화 강제** (프로젝트 루트 환경 가능)

---

## 📝 로컬 서버 실행 규칙

로컬 서버(Streamlit, Flask, Django 등) 실행 시:

1. **가상환경 확인** (프롬프트에 `(venv_name)` 표시 확인)
2. **의존성 확인** (필요 시 `pip install -r requirements.txt`)
3. **실행 명령**:
   - `streamlit`: `python -m streamlit run app.py`
   - 직접 경로: `.\Scripts\streamlit.exe run app.py`
4. **실행 검증** (서버 시작 메시지 확인)
5. **거짓 정보 금지** (실제 실행 여부 확인 필수)

---

## 🔄 Git 규칙

### 커밋 메시지 형식 (Conventional Commits)
```
feat: 새 기능 추가
fix: 버그 수정
docs: 문서 수정
refactor: 코드 리팩토링
```

### 문법 오류는 커밋하지 않음
- SyntaxError, IndentationError 등은 즉시 수정
- 수정 후 사용자 확인 대기
- 명시적 요청 시에만 커밋

### Git 명령 실행 (PowerShell)
PowerShell에서는 반드시 Git 전체 경로를 사용해야 합니다:

```powershell
# ✅ 올바른 방법
& "C:\Program Files\Git\cmd\git.exe" status
& "C:\Program Files\Git\cmd\git.exe" add .
& "C:\Program Files\Git\cmd\git.exe" commit -m "메시지"
& "C:\Program Files\Git\cmd\git.exe" push origin main

# ❌ 잘못된 방법 (작동하지 않음)
git status
git add .
git commit -m "메시지"
git push origin main
```

### Git 푸시 프로토콜
사용자가 "git에 푸시해 줘" 요청 시:

1. **Git 설치 확인**
   ```powershell
   Test-Path "C:\Program Files\Git\cmd\git.exe"
   ```

2. **현재 상태 확인**
   ```powershell
   & "C:\Program Files\Git\cmd\git.exe" status
   ```

3. **변경사항 스테이징**
   ```powershell
   & "C:\Program Files\Git\cmd\git.exe" add .
   ```

4. **커밋**
   ```powershell
   & "C:\Program Files\Git\cmd\git.exe" commit -m "커밋 메시지"
   ```

5. **푸시**
   ```powershell
   & "C:\Program Files\Git\cmd\git.exe" push origin main
   ```

6. **결과 확인 및 보고**
   - 커밋 ID 확인
   - 푸시된 파일 개수 확인
   - 성공 메시지 출력

---

## 📦 패키지 관리

### requirements.txt 작성
- 필수 패키지만 포함
- 버전 범위 지정: `>=` 사용
- 예: `streamlit>=1.50.0`

### 가상환경
- 가상환경은 선택사항
- 프로젝트 루트에도 패키지 설치 가능
- `.gitignore`에 venv 폴더 추가

---

## 🎨 코드 스타일

### Python
- 가독성 우선
- 완전한 구현 (TODO 금지)
- 한글 주석 허용
- UTF-8 인코딩

### README/문서
- 한글로 작성
- 빠른 시작 가이드 포함
- 주요 업데이트 시 README 갱신

---

## 🌐 브랜치 전략

### 브랜치 생성
- 새 기능: `feature/<설명>`
- 버그 수정: `fix/<설명>`
- 긴급 패치: `hotfix/<설명>`

### 머지 규칙
- Squash and Merge 사용
- PR 제목: `[Feature] 설명` 또는 `[Fix] 설명`
- 머지 후 브랜치 삭제

---

## 💡 토큰 효율성

- 불필요한 디버깅 최소화
- 관련 파일만 열기/수정
- 차이점만 표시 (전체 프로젝트 리팩토링 지양)

---

## 🔧 기타 규칙

### Playwright 우선
- 자동화 작업 시 Playwright 사용
- Selenium보다 우선

### Anti-scraping 회피
- 크롤링 시 감지 회피 코드 작성
- undetected-chromedriver 사용

### GUI 선호
- Headless UI 강요 금지
- GUI 옵션 제공

---

**자세한 내용은 PROJECT_TEMPLATE.md 참고**

