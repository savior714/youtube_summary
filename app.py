import streamlit as st
from youtube_utils import extract_video_id, get_transcript, format_transcript, detect_language
from summarizer import Summarizer
from gpu_utils import display_gpu_status, GPUDetector
import time
import os

# ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï
st.set_page_config(
    page_title="Ïú†ÌäúÎ∏å ÏöîÏïΩ ÏÑúÎπÑÏä§",
    page_icon="üì∫",
    layout="wide"
)

# Ï†úÎ™©
st.title("üì∫ ÎÇòÎßåÏùò Ïú†ÌäúÎ∏å ÏöîÏïΩ ÏÑúÎπÑÏä§")
st.markdown("---")


# ÏÇ¨Ïù¥ÎìúÎ∞î ÏÑ§Ï†ï
with st.sidebar:
    st.header("‚öôÔ∏è ÏÑ§Ï†ï")
    
    # ÏöîÏïΩ Í≤∞Í≥º Ïñ∏Ïñ¥ ÏÑ§Ï†ï
    summary_language = st.selectbox(
        "ÏöîÏïΩ Í≤∞Í≥º Ïñ∏Ïñ¥",
        ["ÌïúÍµ≠Ïñ¥", "ÏòÅÏñ¥"],
        index=0,  # Í∏∞Î≥∏Í∞í: ÌïúÍµ≠Ïñ¥
        help="ÏöîÏïΩ Í≤∞Í≥ºÎ•º Ïñ¥Îñ§ Ïñ∏Ïñ¥Î°ú ÏÉùÏÑ±Ìï†ÏßÄ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî"
    )
    
    # Í≥†Í∏â ÏòµÏÖò
    with st.expander("Í≥†Í∏â ÏÑ§Ï†ï", expanded=True):
        show_transcript = st.checkbox("ÏõêÎ≥∏ ÏûêÎßâ Î≥¥Í∏∞", value=False)
        
        
    # --- ÏãúÏä§ÌÖú ÏÉÅÌÉú ÌôïÏù∏ (Ï∫êÏã± Ï†ÅÏö©) ---
    @st.cache_data(show_spinner=False)
    def get_system_status():
        """GPUÏôÄ ffmpeg ÏÉÅÌÉúÎ•º Ìïú Î≤àÎßå ÌôïÏù∏ÌïòÏó¨ Í≤∞Í≥ºÎ•º Ï∫êÏã±Ìï©ÎãàÎã§."""
        ffmpeg_found = False
        ffmpeg_paths = [
            "C:\\ffmpeg\\bin\\ffmpeg.exe",  # Í∂åÏû• ÏÑ§Ïπò Í≤ΩÎ°ú
            "C:\\ffmpegWbin\\ffmpeg.exe", 
            "C:\\Program Files\\ffmpeg\\bin\\ffmpeg.exe",
            "ffmpeg"  # PATHÏóê ÏûàÎäî Í≤ΩÏö∞
        ]
        
        ffmpeg_path_found = None
        for path in ffmpeg_paths:
            try:
                import subprocess
                if path == "ffmpeg":
                    result = subprocess.run([path, "-version"], capture_output=True, text=True, timeout=5)
                else:
                    result = subprocess.run([path, "-version"], capture_output=True, text=True, timeout=5)
                
                if result.returncode == 0:
                    ffmpeg_found = True
                    ffmpeg_path_found = path
                    break
            except:
                continue
        
        gpu_info = GPUDetector().get_device_info()
        return gpu_info, ffmpeg_found, ffmpeg_path_found

    # Ï∫êÏãúÎêú ÏãúÏä§ÌÖú ÏÉÅÌÉú Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    gpu_device_info, ffmpeg_found, ffmpeg_path_found = get_system_status()

    # GPU ÏÉÅÌÉú ÌëúÏãú
    with st.expander("üñ•Ô∏è GPU ÏÉÅÌÉú", expanded=True):
        if gpu_device_info["gpu_available"]:
            st.success(f"‚úÖ GPU: {gpu_device_info['gpu_name']} ({gpu_device_info['vram_gb']:.1f}GB)")
        else:
            st.warning("‚ö†Ô∏è GPU ÎØ∏Í∞êÏßÄ (CPU Î™®Îìú)")

    # ffmpeg ÏÉÅÌÉú ÌëúÏãú
    with st.expander("üîß ÏãúÏä§ÌÖú ÏÉÅÌÉú", expanded=True):
        if not ffmpeg_found:
            st.warning("‚ö†Ô∏è ffmpeg ÎØ∏ÏÑ§Ïπò ÎòêÎäî PATH ÎØ∏ÏÑ§Ï†ï")
        else:
            st.success(f"‚úÖ ffmpeg Î∞úÍ≤¨: {ffmpeg_path_found}")

# Ï†ÄÏû•Îêú Í≤∞Í≥ºÍ∞Ä ÏûàÏúºÎ©¥ ÌëúÏãú
if 'summary_result' in st.session_state:
    result = st.session_state['summary_result']
    
    # Í≤∞Í≥º ÌëúÏãú
    st.success("‚úÖ ÏöîÏïΩÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!")
    
    # ÏöîÏïΩ Î∞©Ïãù ÌëúÏãú
    st.info(f"üìä ÏÇ¨Ïö©Îêú ÏöîÏïΩ Î∞©Ïãù: {result['summary_method']}")
    
    # ÏöîÏïΩ Í≤∞Í≥º
    st.subheader("üìù ÏöîÏïΩ Í≤∞Í≥º")
    st.write(result['summary'])
    
    # Îã§Ïö¥Î°úÎìú Î≤ÑÌäº (Ï¥àÍ∏∞Ìôî Î∞©ÏßÄ)
    col1, col2 = st.columns([1, 1])
    with col1:
        st.download_button(
            label="üì• ÏöîÏïΩ Í≤∞Í≥º Îã§Ïö¥Î°úÎìú",
            data=result['summary'],
            file_name=f"youtube_summary_{result['video_id']}.txt",
            mime="text/plain",
            key="download_summary",
            use_container_width=True
        )
    with col2:
        if st.button("üîÑ ÏÉàÎ°ú ÏöîÏïΩÌïòÍ∏∞", use_container_width=True):
            # session_state Ï¥àÍ∏∞Ìôî
            del st.session_state['summary_result']
            st.rerun()
    
    # ÏõêÎ≥∏ ÏûêÎßâ ÌëúÏãú (ÎèôÏ†ÅÏúºÎ°ú Ï≤¥ÌÅ¨Î∞ïÏä§ ÏÉÅÌÉúÏóê Îî∞Îùº ÌëúÏãú)
    # ÏÇ¨Ïù¥ÎìúÎ∞îÏùò show_transcript Í∞íÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ ÎèôÏ†ÅÏúºÎ°ú ÌëúÏãú
    if show_transcript:
        with st.expander("üìÑ ÏõêÎ≥∏ ÏûêÎßâ Î≥¥Í∏∞", expanded=True):
            st.text_area("ÏûêÎßâ ÎÇ¥Ïö©:", result['transcript_text'], height=300, key="transcript_display")
    
    # ÌÜµÍ≥Ñ Ï†ïÎ≥¥
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("ÏõêÎ≥∏ Í∏∏Ïù¥", f"{len(result['transcript_text']):,}Ïûê")
    with col2:
        st.metric("ÏöîÏïΩ Í∏∏Ïù¥", f"{len(result['summary']):,}Ïûê")
    with col3:
        compression_ratio = (1 - len(result['summary']) / len(result['transcript_text'])) * 100
        st.metric("ÏïïÏ∂ïÎ•†", f"{compression_ratio:.1f}%")
    
    st.markdown("---")

# Î©îÏù∏ Ïª®ÌÖêÏ∏†
col1, col2 = st.columns([2, 1])

with col1:
    st.subheader("üîó Ïú†ÌäúÎ∏å URL ÏûÖÎ†•")
    url = st.text_input(
        "Ïú†ÌäúÎ∏å ÎßÅÌÅ¨Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî:",
        placeholder="https://www.youtube.com/watch?v=...",
        help="Ïú†ÌäúÎ∏å ÏòÅÏÉÅ URLÏùÑ ÏûÖÎ†•ÌïòÎ©¥ ÏûêÎèôÏúºÎ°ú ÏûêÎßâÏùÑ Ï∂îÏ∂úÌïòÍ≥† ÏöîÏïΩÌï©ÎãàÎã§."
    )

with col2:
    st.subheader("üìä ÏÇ¨Ïö©Î≤ï")
    st.markdown("""
    1. Ïú†ÌäúÎ∏å URL ÏûÖÎ†•
    2. ÏÑ§Ï†ï Ï°∞Ï†ï (ÏÑ†ÌÉùÏÇ¨Ìï≠)
    3. 'ÏöîÏïΩÌïòÍ∏∞' Î≤ÑÌäº ÌÅ¥Î¶≠
    4. Í≤∞Í≥º ÌôïÏù∏ Î∞è Îã§Ïö¥Î°úÎìú
    """)

# --- Î™®Îç∏ Î°úÎî© ---
# Ïï± ÏãúÏûë Ïãú Ìïú Î≤àÎßå Î™®Îç∏ÏùÑ Î°úÎìúÌïòÏó¨ ÏÑ±Îä• Ìñ•ÏÉÅ
@st.cache_resource
def load_models():
    summarizer = Summarizer()
    detector = GPUDetector()
    return summarizer, detector

# ÏöîÏïΩ Ïã§Ìñâ
if st.button("üöÄ ÏöîÏïΩÌïòÍ∏∞", type="primary"):
    if not url:
        st.warning("Ïú†ÌäúÎ∏å URLÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")
    else:
        # ÏßÑÌñâ ÏÉÅÌô© ÌëúÏãú
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        try:
            # Ï∫êÏãúÎêú Î™®Îç∏ Î°úÎìú
            summarizer, detector = load_models()

            # 1Îã®Í≥Ñ: ÎπÑÎîîÏò§ ID Ï∂îÏ∂ú
            status_text.text("ÎπÑÎîîÏò§ ID Ï∂îÏ∂ú Ï§ë...")
            progress_bar.progress(10)
            
            video_id = extract_video_id(url)
            if not video_id:
                st.error("Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Ïú†ÌäúÎ∏å URLÏûÖÎãàÎã§.")
                st.stop()
            
            # 2Îã®Í≥Ñ: ÏûêÎßâ/ÏùåÏÑ± Ï∂îÏ∂ú
            status_text.text("ÏûêÎßâ/ÏùåÏÑ± Ï∂îÏ∂ú Ï§ë...")
            progress_bar.progress(30)
            
            transcript_data = get_transcript(url, use_whisper=True)
            if not transcript_data:
                st.error("ÏûêÎßâ/ÏùåÏÑ± Ï∂îÏ∂úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.")
                st.stop()
            
            # 3Îã®Í≥Ñ: ÌÖçÏä§Ìä∏ Î≥ÄÌôò
            status_text.text("ÌÖçÏä§Ìä∏ Î≥ÄÌôò Ï§ë...")
            progress_bar.progress(50)
            
            transcript_text = format_transcript(transcript_data)
            
            # 4Îã®Í≥Ñ: ÏõêÎ≥∏ Ïñ∏Ïñ¥ Í∞êÏßÄ Î∞è ÏöîÏïΩ Ïñ∏Ïñ¥ ÏÑ§Ï†ï
            detected_lang = detect_language(transcript_text)
            st.info(f"ÏõêÎ≥∏ ÌÖçÏä§Ìä∏ Ïñ∏Ïñ¥ Í∞êÏßÄ: {'ÌïúÍµ≠Ïñ¥' if detected_lang == 'ko' else 'ÏòÅÏñ¥'}")
            
            # ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÑ†ÌÉùÌïú Ïñ∏Ïñ¥Î•º Ïö∞ÏÑ† ÏÇ¨Ïö©
            if summary_language == "ÌïúÍµ≠Ïñ¥":
                target_lang = "ko"
                st.info("‚úÖ ÏöîÏïΩ Ïñ∏Ïñ¥: ÌïúÍµ≠Ïñ¥Î°ú ÏöîÏïΩÌï©ÎãàÎã§")
            else:
                target_lang = "en"
                st.info("‚úÖ ÏöîÏïΩ Ïñ∏Ïñ¥: ÏòÅÏñ¥Î°ú ÏöîÏïΩÌï©ÎãàÎã§")
            
            # ÏõêÎ≥∏ Ïñ∏Ïñ¥ÏôÄ Îã§Î•∏ Í≤ΩÏö∞ ÏïàÎÇ¥ Î©îÏãúÏßÄ
            if (detected_lang == 'ko' and target_lang == 'en') or \
               (detected_lang == 'en' and target_lang == 'ko'):
                st.info("üí° ÏõêÎ≥∏ Ïñ∏Ïñ¥ÏôÄ Îã§Î•∏ Ïñ∏Ïñ¥Î°ú ÏöîÏïΩÌï©ÎãàÎã§. Î≤àÏó≠ ÌíàÏßàÏóê Îî∞Îùº Í≤∞Í≥ºÍ∞Ä Îã¨ÎùºÏßà Ïàò ÏûàÏäµÎãàÎã§.")
            
            # 5Îã®Í≥Ñ: ÏöîÏïΩ ÏÉùÏÑ±
            status_text.text("AI ÏöîÏïΩ ÏÉùÏÑ± Ï§ë...")
            progress_bar.progress(70)
            
            # Whisper Ï≤òÎ¶¨ ÏãúÍ∞Ñ ÏïàÎÇ¥
            if "ÏùåÏÑ± Ïù∏Ïãù" in st.session_state.get('last_method', ''):
                st.info("""
                ‚è±Ô∏è **Ï≤òÎ¶¨ ÏãúÍ∞Ñ ÏïàÎÇ¥**
                - ÌòÑÏû¨ Whisper ÏùåÏÑ± Ïù∏ÏãùÏù¥ ÏßÑÌñâ Ï§ëÏûÖÎãàÎã§
                - ÌååÏùº ÌÅ¨Í∏∞Ïóê Îî∞Îùº 5-15Î∂Ñ ÏÜåÏöîÎê† Ïàò ÏûàÏäµÎãàÎã§
                - Î∏åÎùºÏö∞Ï†ÄÎ•º Îã´ÏßÄ ÎßàÏÑ∏Ïöî (Ï≤òÎ¶¨Í∞Ä Ï§ëÎã®Îê©ÎãàÎã§)
                """)
            
            # Í∏∏Ïù¥ Ï†úÌïú Ï†úÍ±∞ - ÏûêÎèôÏúºÎ°ú ÏµúÏ†Å Í∏∏Ïù¥ Í≤∞Ï†ï
            st.info("üìè ÏöîÏïΩ Í∏∏Ïù¥: ÏûêÎèô Ï°∞Ï†à (Ï†úÌïú ÏóÜÏùå)")
            
            # ÏûêÎèô Î™®Îç∏ ÏÑ†ÌÉùÏúºÎ°ú ÏöîÏïΩ
            summary = summarizer.summarize_text(
                transcript_text, 
                language=target_lang
            )
            
            # ÏÇ¨Ïö©Îêú Î™®Îç∏ Ï†ïÎ≥¥ ÌëúÏãú
            device_info = detector.get_device_info()
            vram_gb = device_info["vram_gb"]
            device = device_info["device"]
            gpu_name = device_info["gpu_name"]
            
            if device == "cuda":
                if vram_gb >= 12:
                    summary_method = f"LongT5 Full Precision (GPU: {gpu_name})"
                elif vram_gb >= 8:
                    summary_method = f"LongT5 8bit (GPU: {gpu_name})"
                elif vram_gb >= 4:
                    summary_method = f"LongT5 8bit (GPU: {gpu_name})"
                elif vram_gb >= 2:
                    summary_method = f"LongT5 4bit (GPU: {gpu_name})"
                else:
                    summary_method = f"LongT5 4bit (GPU: {gpu_name})"
            else:
                summary_method = "BART (CPU)"
            
            progress_bar.progress(100)
            status_text.text("ÏôÑÎ£å!")
            
            # Í≤∞Í≥ºÎ•º session_stateÏóê Ï†ÄÏû•
            st.session_state['summary_result'] = {
                'summary': summary,
                'summary_method': summary_method,
                'video_id': video_id,
                'transcript_text': transcript_text,
                'show_transcript': show_transcript
            }
            
            # Í≤∞Í≥ºÍ∞Ä Ï†ÄÏû•ÎêòÏóàÏúºÎØÄÎ°ú ÌéòÏù¥ÏßÄ ÏÉàÎ°úÍ≥†Ïπ®
            st.rerun()
                
        except Exception as e:
            st.error(f"Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}")
            st.exception(e)  # ÏÉÅÏÑ∏Ìïú Ïò§Î•ò Ï†ïÎ≥¥ ÌëúÏãú
            st.info("Îã§Î•∏ ÏòÅÏÉÅÏúºÎ°ú ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî.")

# Ìë∏ÌÑ∞
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666;'>
    <p>üí° <strong>ÌåÅ:</strong> ÏûêÎßâÏù¥ ÏûàÎäî ÏòÅÏÉÅÏóêÏÑúÎßå ÏûëÎèôÌï©ÎãàÎã§. ÏûêÎèô ÏÉùÏÑ± ÏûêÎßâÎèÑ ÏßÄÏõêÌï©ÎãàÎã§.</p>
    <p>üé§ <strong>ÏùåÏÑ± Ïù∏Ïãù:</strong> ÏûêÎßâÏù¥ ÏóÜÎäî ÏòÅÏÉÅÏùÄ WhisperÎ°ú ÏùåÏÑ± Ïù∏ÏãùÌï©ÎãàÎã§.</p>
    <p>üîß <strong>Î¨∏Ï†ú Ìï¥Í≤∞:</strong> ffmpegÍ∞Ä ÏÑ§ÏπòÎêòÏñ¥ ÏûàÏßÄ ÏïäÏúºÎ©¥ ÏùåÏÑ± Ïù∏ÏãùÏù¥ Ïã§Ìå®Ìï† Ïàò ÏûàÏäµÎãàÎã§.</p>
</div>
""", unsafe_allow_html=True)